language: cpp
sudo: required
dist: trusty
matrix:
  include:
    - os: linux
      env: ARCH="x86_64"
      compiler: "g++ -m64"
      addons:
        apt:
          packages:
            - libssl1.0.0
            - bar
            - time
            - gfortran
cache:
  directories:
    - $TRAVIS_BUILD_DIR/deps/srccache
    - $TRAVIS_BUILD_DIR/deps/scratch
    - $TRAVIS_BUILD_DIR/deps/usr-staging
branches:
  only:
    - master
notifications:
    email: false
before_install:
    - make check-whitespace
    - if [ `uname` = "Linux" ]; then
        contrib/travis_fastfail.sh || exit 1;
        gcc --version;
        BAR="bar -i 30";
        BUILDOPTS="-j3 VERBOSE=1 FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1";
        echo "override ARCH=$ARCH" >> Make.user;
        TESTSTORUN="all";
    - git clone -q git://git.kitenet.net/moreutils
script:
    - echo BUILDOPTS=$BUILDOPTS
    - export BUILDOPTS
    # compile / install dependencies
    - contrib/download_cmake.sh
    - make -C moreutils mispipe
    - make $BUILDOPTS -C base version_git.jl.phony
    # capture the log, but only print it if `make deps` fails
    # try to show the end of the log first, because this log might be very long (> 4MB)
    # and thus be truncated by travis
    - moreutils/mispipe "make \$BUILDOPTS NO_GIT=1 -C deps 2> deps-err.log" "$BAR" > deps.log ||
        { echo "-- deps build log stderr tail 100 --------------------------------------";
          tail -n 100 deps-err.log;
          echo "-- deps build log stdout tail 100 --------------------------------------";
          tail -n 100 deps.log;
          echo "-- deps build log stderr all -------------------------------------------";
          cat deps-err.log;
          echo "-- deps build log stdout all -------------------------------------------";
          cat deps.log;
          echo "-- end of deps build log -----------------------------------------------";
          false; }
    # compile / install Julia
    - make $BUILDOPTS NO_GIT=1 prefix=/tmp/julia install | moreutils/ts -s "%.s"
    - make $BUILDOPTS NO_GIT=1 build-stats
    - du -sk /tmp/julia/*
    - if [ `uname` = "Darwin" ]; then
        for name in suitesparseconfig spqr umfpack colamd cholmod amd suitesparse_wrapper; do
            install -pm755 usr/lib/lib${name}*.dylib* /tmp/julia/lib/julia/;
        done;
      fi
    - cd .. && mv julia julia2
    # run tests
    - /tmp/julia/bin/julia --precompiled=no -e 'true' &&
        /tmp/julia/bin/julia-debug --precompiled=no -e 'true'
    - /tmp/julia/bin/julia -e 'versioninfo()'
    - pushd /tmp/julia/share/julia/test
    - export JULIA_CPU_CORES=2 && export JULIA_TEST_MAXRSS_MB=600 &&
        /tmp/julia/bin/julia --check-bounds=yes runtests.jl $TESTSTORUN &&
        /tmp/julia/bin/julia --check-bounds=yes runtests.jl libgit2-online download pkg
    - popd
    # test that the embedding code works on our installation
    - mkdir /tmp/embedding-test &&
        make check -C /tmp/julia/share/doc/julia/examples/embedding \
             JULIA="DYLD_FALLBACK_LIBRARY_PATH='$DYLD_FALLBACK_LIBRARY_PATH' /tmp/julia/bin/julia" \
             BIN=/tmp/embedding-test \
             "$(cd julia2 && make print-CC)"
    # restore initial state and prepare for travis caching
    - mv julia2 julia &&
        rm -f julia/deps/scratch/libgit2-*/CMakeFiles/CMakeOutput.log
# uncomment the following if failures are suspected to be due to the out-of-memory killer
    - dmesg
